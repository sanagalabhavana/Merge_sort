package Merge_sort_using_recursion;

public class Merge_sort {
    static void merge(int arr[],int s1,int e1,int s2,int e2) {
    	int n=e1-s1+1;
    	int m=e2-s2+1;
    	int a[]=new int [n];
    	int b[]=new int [m];
    	for(int i=s1;i<=e1;i++) {
    		a[i-s1]=arr[i];
    		
    	}
    	for(int i=s2;i<=e2;i++) {
    		b[i-s2]=arr[i];
    	}
    	
    	int i=0,j=0;
    	int ind=s1;
    	while(i<n && j<m) {
    		if(a[i]<=b[j]) {
    			arr[ind++]=a[i++];
    		}
    		else {
    			arr[ind++]=b[j++];
    		}
    	}
    	while(i<n) {
    		arr[ind++]=a[i++];
    	}
    	while(j<m) {
    		arr[ind++]=b[j++];
    	}
    	
    }
	
	static void mergesort(int arr[],int l,int r) {
		if(l>=r) return;
		int mid=(l+r)/2;
		mergesort(arr,l,mid);
		mergesort(arr,mid+1,r);
		
		merge(arr,l,mid,mid+1,r);
		
	}
	
	
	public static void main(String[] args) {
		int arr[]= {1,21,2,4,7};
		int n=arr.length;
		mergesort(arr,0,arr.length-1);
		
        for(int i=0;i<n;i++) {
        	System.out.print(arr[i]+" ");
        }
	}

}
